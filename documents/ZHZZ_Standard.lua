---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Xu Bo.
--- DateTime: 2018/1/16 16:36
--- https://tangzx.github.io/emmydoc/annotations/example.html
require("LuaUtil")
-----------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------1、class 类声明，与类对象的使用--------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------

-- 构造方法
---@class Account
---@field public balanceInitValue number
---@field public thisGameObject UnityEngine.GameObject
Account = { balance = 230, thisGameObject }
local newBalacne = 10

function Account:New(o)
    o = o or {}
    setmetatable(o, self)
    self.__index = self
    return o
end



-- 方法
---@param v number
---@return number
function Account:Deposit(v)
    self.balance = self.balance + v
    return self.balance
end

acountUser1 = Account:New()
acountUser2 = Account:New()
print('acountUser1 : ' .. acountUser1:Deposit(12))
print('acountUser2 : ' .. acountUser2:Deposit(30))

-- 继承
---@class SpecialAccount : Account
SpecialAccount = Account:New({limit = 50})

function SpecialAccount:Deposit(v)
    self.balance = self.balance + 2 * v
end

-- 实例化对象与使用
sa = SpecialAccount:New()
sa:Deposit(10)

sb = SpecialAccount:New()
sb.balance = 12
print("specail a limit value : " .. sa.limit,sa.balance)

--print("b balance value : " .. sb.balance)

--------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------2、枚举声名-------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------
--所有枚举和常量类必须使用table

--所有枚举声名，必须用ENUM_开头

--简单的枚举，和常量一样，全部大写，所有枚举值必须手动写全
ENUM_STANDARD = {
    ERROR = -1,
    NORMAL = 0,
    FIRST_LOGIN = 1,
    BACK_SEL_ROLE = 2,
    BACK_TO_LOGIN = 3,
    HOST_GOTO = 4,
    START_GAME = 5,
    CHANGE_LINE = 6,
};
print("Simple enum is : " .. ENUM_STANDARD.START_GAME)

--复杂枚举用CreateEnumTable来创建，支持自动生成默认值的写法，并支持ToString方法获取key字符串
ENUM_COMPLEX = LuaUtil.CreateEnumTable {
    "DT_NO_COLOR = -1", -- 复杂枚举用单引号定义，才会有上色和跳转
    'DT_INVALID = 0',
--  1
    'DT_PROPERTY_ADDON', --  BaseData\附加属性
    'DT_QTE_CONFIG', --  BaseData\Config\QTE
    'DT_QTE_PLAYER_MONSTER_INTERACTION_CONFIG', --  BaseData\Config\QTE人怪交互
    'DT_VIP_CONFIG', --  BaseData\Config\VIP配置
    'DT_DROP_BY_LEVEL_CONFIG', --  BaseData\Config\按等级单独掉落配置
--...
--...
}
print("Complex enum is : " .. ENUM_COMPLEX.ToString(ENUM_COMPLEX.DT_INVALID) .. "\nComplex enum value is : " .. ENUM_COMPLEX.DT_INVALID) --> DT_INVALID



--------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------4、变量名规范-------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------
--所有变量名，包括成员变量、局部变量、方法的参数等，要尽量体现参数类型，禁止用首字母缩写

--如果觉得这样写和类名太相近，可酌情缩减，但不允许看到变量名，却不知道这是个什么东西的情况出现
--公有方法名要起的有特色（保证跳转唯一）
--不要都叫Init、GetState等，必须加上自己模块的关键字，比如InitActivity、GetActivityState
function StandardFunction(octetsStream, binaryReader, dlgPanel)
end

-- 基础类型变量名规范：变量名必须要体现变量类型
-- Number : hp, level, windId,
-- String : playerName, hpDesc,
-- RawBoolean : isOK, canDo, exist
-- Function : callback, SordFunc

--禁止出现下面这种类型不明确的变量名 : beAttackedAudioMaterial
--要改为
--Number : beAttackedAudioMaterialId or beAttackedAudioMaterialType ...
--String : beAttackedAudioMaterialStr ...

--int64是tolua支持的一个Userdata类型的，这个类型在咱们客户端替换long和ulong等，广泛用于各种Object的ID，对于此类型，约定前缀i64，如下所示：
function CmdAttack(i64Self, i64Target)
end


--禁止这样写，自带混淆
function ForbidFunction(os, br, panel)
end

--------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------5、其他注意事项-----------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------
-- 1. 禁止对一个变量改变类型
-- 2. 正式运行环境中不要使用..来连接字符串（string.contact?），非常低效，调试环境及错误Log时可考虑使用；
-- 3. 数字下标从1开始，尊崇LUA习惯，必要再给table的下标0赋值使用；
-- 4. 任何地方，包括函数内部定义的临时变量，都必须写local标记，不然定义的就是全局变量
-- 6. 任何一个非Boolean型变量判断真假时，都要显示的写上条件，禁止这样写
-- 非Boolean型变量禁止此写法， 必须显示的写上判断条件
if someNotBoolValue then
end

-- 7. Boolean判断真假写法推荐：

--真，推荐写法
if someBool == true then
    --do something
end

--真，（X）不推荐此写法
if someBool then
    --do something
end

--假，推荐写法
if someBool ~= true then
    --do something
end

--假, （X）不推荐此写法
if not someBool then
    --do something
end

--假, （X）不推荐此写法
if someBool == false then
    --do something
end

-- 7. Lua里没有continue关键字，用if else代替，不要发明各种怪异的写法
-- 8. Lua里没有switch关键字，用if else代替


--------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------6、注释全例子，可辅助跳转与提示，具体类实现省略了-------------------
--------------------------------------------------------------------------------------------------------------------------------------
---@class Transport @父类
---@public field name string
local transport = {}

function transport:move()
end

---@class Car : Transport @Car继承自Transport
local car = {}
function car:move()
end

---@class Ship : Transport @Ship继承自Transport
local ship = {}

---@param type number @参数type说明
---@return Car|Ship @返回类型可能是Car也有可能是Ship
local function create(type)
    -- 略
end

local obj = create(1)
---此时obj可代码提示

---@type Car
local obj2
---此时obj2可代码提示

local list = { obj, obj2 }
---@param v Transport
for _, v in ipairs(list) do
    ---此时v可代码提示
end
